<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Hello World</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">
      // declare an empty object inside of our state (activeBoat//activePlayer)
      // a function that populates the activeBoat object with data from a form
      class App extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            boats: <%- boats %>,
            activeBoat: {},
            showForm: false
          }
          this.setActiveBoat = this.setActiveBoat.bind(this);
        }
        setActiveBoat = (e) => {
          let boat = this.state.boats.find(boat => boat._id == e.id)
          this.setState({ activeBoat: boat })
        }
        clearBoat = (e) => {
          let boat = {name: "", length: "", type: "", _id: "", id: ""}
          this.setState({ activeBoat: boat })
        }
        handleChange = (boat) => {
          const idx = this.state.boats.findIndex((el) => el._id == boat.target.id)
          this.state.boats[idx][boat.target.name] = boat.target.value
          this.setState({ boats: this.state.boats })
        }
        onTransact = (id) => {
          let res = this.state.boats.filter(boat => boat.id != id);
          this.setState({ boats: res })
        }
        showForm = () => {
          this.setState((prevState, props) => ({
            showForm: !prevState.showForm
          }))
        }
        // CRUD
        saveBoat = () => {
          let req = {
            method: "POST",
            headers: {
              'Content-type': 'application/json',
            },
            body: JSON.stringify(this.state.activeBoat)
          }
          fetch('api/addResource', req)
            .then(
              res => console.log(res.json())
            )
        }
        updateBoat = () => {
          let req = {
            method: "POST",
            headers: {
              'Content-type': 'application/json',
            },
            body: JSON.stringify(this.state.activeBoat)
          }
          fetch(`/api/update/${this.state.activeBoat.id}`, req)
            .then(
              res => console.log(res.json())
            )
        }
        deleteBoat = () => {
          let req = {
            method: "GET",
            headers: {
              'Content-type': 'application/json',
            }
          }
          fetch(`/api/deleteResource/${this.state.activeBoat.id}`, req)
            .then(
              res => this.onTransact(this.state.activeBoat.id)
            )
        }
        render(){
          return (
            <div>
              <BoatList boats={this.state.boats} setActiveBoat={this.setActiveBoat} showForm={this.showForm} activeBoat={this.state.activeBoat}></BoatList>

              {this.state.activeBoat.name ? <div><h1>{this.state.activeBoat.name}</h1><a onClick={this.showForm}>edit</a></div> : <div><h1>No Selected Boat</h1></div>}
              
              {this.state.showForm ? <DetailForm boat={this.state.activeBoat} handleChange={this.handleChange} clearBoat={this.clearBoat} saveBoat={this.saveBoat} updateBoat={this.updateBoat} deleteBoat={this.deleteBoat}></DetailForm> : null}
            </div>
          )
        }
      }

      const DetailForm = (props) => {
        
        let {name, length, type, _id} = props.boat
        
        const updateClick = (e) => {
          e.preventDefault()
        }
        const clearForm = (e) => {
          e.preventDefault()
          props.clearBoat(e.target)
        }
        const saveBoat = (e) => {
          e.preventDefault()
          props.updateBoat(e.target)
        }
        const deleteBoat = (e) => {
          e.preventDefault()
          props.deleteBoat(e.target)
        }
        
        return (
          <form>
            <input type="text" name="name" value={name || ""} id={_id} onChange={props.handleChange} />
            <input type="text" name="length" value={length || ""} id={_id} onChange={props.handleChange} />
            <input type="text" name="type" value={type || ""} id={_id} onChange={props.handleChange} />
            <button onClick={updateClick}>Submit</button>
            <button id={_id} onClick={clearForm}>Clear</button>
            <button id={_id} onClick={saveBoat}>Save</button>
            <button id={_id} onClick={deleteBoat}>Delete</button>
          </form>
        )
      }

      class BoatList extends React.Component {
        constructor(props) {
          super(props);
        }
        render(){
          let boats = this.props.boats.map((boat) => 
            <Boat setActiveBoat={this.props.setActiveBoat} boat={boat} activeBoat={this.props.activeBoat} showForm={this.props.showForm}></Boat>
          );
          return (
            <div>
              {boats}
            </div>
          )
        }
      }

      class Boat extends React.Component {
        constructor(props) {
          super(props)
        }
        activateBoat = (e) => {
          this.props.setActiveBoat(e.target)
        }
        render(){
          let {name, length, type, _id} = this.props.boat
          return (
            <div>
              <h2><a id={_id} name={name} type={type} length={length} onClick={this.activateBoat}>{name}</a></h2>
            </div>
          )
        }
      }

      const container = document.getElementById('root');
      const root = ReactDOM.createRoot(container);
      root.render(<App/>);

    </script>
    <!--
      Note: this page is a great way to try React but it's not suitable for production.
      It slowly compiles JSX with Babel in the browser and uses a large development build of React.

      Read this section for a production-ready setup with JSX:
      https://reactjs.org/docs/add-react-to-a-website.html#add-jsx-to-a-project

      In a larger project, you can use an integrated toolchain that includes JSX instead:
      https://reactjs.org/docs/create-a-new-react-app.html

      You can also use React without JSX, in which case you can remove Babel:
      https://reactjs.org/docs/react-without-jsx.html
    -->
  </body>
</html>